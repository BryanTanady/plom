#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import os
import shutil

# import tools for dealing with resource files
import pkg_resources

from plom import SpecVerifier, SpecParser
from plom.produce import buildAllPapers, confirmProcessed, confirmNamed
from plom.produce import paperdir

specdir = "specAndDatabase"
dbfile = os.path.join(specdir, "plom.db")


def checkTomlExtension(fname):
    ext = os.path.splitext(fname)[1]
    if ext == ".toml":
        return fname
    elif len(ext) == 0:
        return fname + ".toml"
    else:
        print(
            'Your specification file name should either have no extension or end in ".toml".'
        )
        exit(1)


def createSpecificationFile(fname):
    print('Creating specification file with name "{}"'.format(fname))
    template = pkg_resources.resource_string("plom", "templateTestSpec.toml")
    with open(fname, "wb") as fh:
        fh.write(template)
    print('Creating "sourceVersions" directory for your test source PDFs.')
    os.makedirs("sourceVersions", exist_ok=True)
    print(
        "Please edit the template specification file and copy your source test PDFs into the sourceVersions directory as version1.pdf, version2.pdf etc."
    )


def parseAndVerifySpecification(fname):
    os.makedirs(specdir, exist_ok=True)
    os.makedirs("sourceVersions", exist_ok=True)
    print('Parsing and verifying the specification "{}"'.format(fname))
    if not os.path.isfile(fname):
        print('Cannot find "{}" - have you run "plom-build create" yet?'.format(fname))
        exit(1)

    sv = SpecVerifier(fname)
    sv.verifySpec()
    sv.checkCodes()
    sv.saveVerifiedSpec()
    sp = SpecParser()
    if sp.spec["numberToName"] > 0:
        print(
            'Your spec indicates that you wish to print named papers.\nPlease process your class list using "plom-build class ".'
        )


def processClasslist(fname):
    from plom.produce import buildClasslist

    # check if a filename given
    if fname is None:
        print("Please provide a classlist file.")
        buildClasslist.acceptedFormats()
        exit(1)
    # grab the file, process it and copy it into place.

    if os.path.isfile(fname):
        buildClasslist.processClassList(fname, os.path.join(specdir, "classlist.csv"))
    else:
        print('Cannot find file "{}"'.format(fname))
        exit(1)


def buildDatabase(spec):
    from plom.produce import buildPlomDB

    if os.path.isfile(dbfile):
        print("Database already exists - aborting.")
        exit(1)

    print("Creating plom database")
    buildPlomDB.buildExamDatabase(spec, dbfile)
    print("Done!")


def buildBlankPapers(spec):
    print("Building blank papers")
    buildAllPapers(spec, dbfile)
    print("Checking papers produced and updating databases")
    confirmProcessed(spec, dbfile)


def buildNamedPapers(spec):
    if spec["numberToName"] > 0:
        print(
            "Building {} pre-named papers and {} blank papers...".format(
                spec["numberToName"], spec["numberToProduce"] - spec["numberToName"]
            )
        )
    else:
        print("Building {} blank papers...".format(spec["numberToProduce"]))
    buildAllPapers(spec, dbfile, named=True)
    print("Checking papers produced and updating databases")
    confirmProcessed(spec, dbfile)
    confirmNamed(spec, dbfile)


def buildDatabaseAndPapers(blank):
    print("Reading specification")
    if not os.path.isfile(os.path.join(specdir, "verifiedSpec.toml")):
        print('Cannot find verified specFile - have you run "plom-build parse" yet?')
        exit(1)
    spec = SpecParser().spec

    if blank == "true" and spec["numberToName"] > 0:
        print(
            ">>> WARNING <<< "
            "Your spec says to produce {} named-papers, but you have run with the '--blank' option. Building unnamed papers.".format(
                spec["numberToName"]
            )
        )

    buildDatabase(spec)

    print('Making "{}" directory for papers'.format(paperdir))
    os.makedirs(paperdir, exist_ok=True)
    if blank:
        buildBlankPapers(spec)
    else:
        buildNamedPapers(spec)


parser = argparse.ArgumentParser()
sub = parser.add_subparsers(help="sub-command help", dest="command",)
#
spC = sub.add_parser("new", help="Create new spec file.")
spC.add_argument(
    "specFile",
    nargs="?",
    default="testSpec.toml",
    help="Create test-specification toml file with name specFile. If no argument given then defaults to 'testSpec.toml'",
)
#
spP = sub.add_parser("parse", help="Parse spec file.")
spP.add_argument(
    "specFile",
    nargs="?",
    default="testSpec.toml",
    help="Parse and verify test-specification toml file with name specFile. If no argument given then defaults to 'testSpec.toml'",
)

#
spL = sub.add_parser("class", help="Read in a classlist.")
spL.add_argument(
    "classlist",
    nargs="?",
    help="Process the given classlist file and copy the result into place.",
)

#
spB = sub.add_parser(
    "make",
    help="Make the PDFs",
    epilog="""
        Build papers and database from the test specification.  Based on the
        spec, some of the papers may have names printed on them from the
        classlist ("pre-named") and the remainder will be blank.""",
)
spB.add_argument(
    "-b",
    "--blank",
    action="store_true",
    help="Force building only blank papers, ignoring spec",
)

# Now parse things
args = parser.parse_args()

if args.command == "new":
    # check the file extension
    fname = checkTomlExtension(args.specFile)
    # copy the template spec into place
    createSpecificationFile(fname)
elif args.command == "parse":
    # check the file extension
    fname = checkTomlExtension(args.specFile)
    # copy the template spec into place
    parseAndVerifySpecification(fname)
elif args.command == "class":
    # process the class list and copy into place
    processClasslist(args.classlist)
elif args.command == "make":
    # get building.
    buildDatabaseAndPapers(args.blank)
else:
    # no command given so print help.
    parser.print_help()

exit(0)
